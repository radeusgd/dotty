object SeqTest {
  import scala.annotation.internal.local

  sealed trait List2[T] {
    def map[U](@local f: T => U): List2[U] =
      this match {
        case Cons2(head, rest) =>
          Cons2(f(head), rest.map(f))
        case Nil2() =>
          Nil2()
      }
  }

  final case class Cons2[T](
    head: T,
    tail: List2[T]
  ) extends List2[T]

  final case class Nil2[T]() extends List2[T]

  /*
   For List2#map to work correctly, it has to have this signature:

   def map[U](@local f: (@local T) => U

   Consider:

   def foo(@local c: Console): Unit = {
   List2("Hello," "world!").map(c.println)
   }

   If the argument to `f` is not local, we are not guaranteed that
   */
}
